use lvgl_codegen::{CodeGen, Rusty};
use proc_macro2::TokenStream;
use quote::quote;
use std::env;
use std::fs::File;
use std::io::prelude::*;
use std::path::{Path, PathBuf};

fn generate_widgets(out_path: &Path) {
    let rs = out_path.join("generated-widgets.rs");

    let widgets_impl = lvgl_sys::_bindgen_raw_src();

    let codegen = CodeGen::from(widgets_impl).unwrap();
    let widgets_impl: Vec<TokenStream> = codegen
        .get_widgets()
        .iter()
        .flat_map(|w| w.code(&()))
        .collect();

    let code = quote! {
        #(#widgets_impl)*
    };

    let mut file = File::create(rs).unwrap();
    writeln!(
        file,
        "/* automatically generated by lvgl-codegen */\n{}",
        code
    )
    .unwrap();
}

fn generate_color_settings(out_path: &Path) {
    let rs = out_path.join("generated-color-settings.rs");

    // We match embedded_graphics precisely what the driver is configured for.
    // This will enable fast drawing.
    let pixel_color = match (lvgl_sys::LV_COLOR_DEPTH, lvgl_sys::LV_COLOR_16_SWAP) {
        (1, _) => "BinaryColor",
        (8, _) => panic!("RGB332 is not supported by embedded_graphics"),
        (16, 0) => "Rgb565",
        (16, 1) => "Bgr565",
        (32, _) => "Rgb888",
        _ => panic!("Unrecognized (LV_COLOR_DEPTH, LV_COLOR_16_SWAP)"),
    };

    let code = format!(
        "pub type PixelColor = embedded_graphics::pixelcolor::{};",
        pixel_color
    );

    let mut file = File::create(rs).unwrap();
    writeln!(
        file,
        "/* automatically generated by lvgl-codegen */\n{}",
        code
    )
    .unwrap();
}

fn main() {
    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    generate_widgets(&out_path);
    generate_color_settings(&out_path);
}
